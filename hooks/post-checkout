#!/bin/bash

# Ensure script exits on error
set -euo pipefail


if [ "$BUILDKITE_BRANCH" == "main" ]; then

  # Check if the required environment variables are set
  if [[ -z "${BUILDKITE_PLUGIN_SEMVER_ECR_REPOSITORY:-}" ]] ; then
        echo "Repository not set"
        exit 1
  else
        echo "Using Repository: ${BUILDKITE_PLUGIN_SEMVER_ECR_REPOSITORY}"
  fi

  if [[ -z "${BUILDKITE_PLUGIN_SEMVER_ECR_REGION:-}" ]] ; then
        echo "Region not set"
        exit 1
  else
        echo "Region: ${BUILDKITE_PLUGIN_SEMVER_ECR_REGION}"
  fi

  if [[ -z "${BUILDKITE_PLUGIN_SEMVER_ECR_ACCOUNT:-}" ]] ; then
        echo "Account not set"
        exit 1
  else
        echo "Repository Account: ${BUILDKITE_PLUGIN_SEMVER_ECR_ACCOUNT}"
  fi

  # Get the latest commit message
  commit_message=$(git log -1 --pretty=%s)

  # Extract the string from source branch
  VERSION_BUMP=$(echo "$commit_message" | sed -n 's|.*DemystData/\([^/]*\)/.*|\1|p')

  echo "Version to Bump: $VERSION_BUMP"

  LATEST_TAG=$(aws ecr describe-images \
      --repository-name  ${BUILDKITE_PLUGIN_SEMVER_ECR_REPOSITORY} \
      --region ${BUILDKITE_PLUGIN_SEMVER_ECR_REGION} \
      --registry-id ${BUILDKITE_PLUGIN_SEMVER_ECR_ACCOUNT} \
      --query 'imageDetails[?starts_with(imageTags[0], `v`)] | sort_by(@, &imagePushedAt)[-1].imageTags[0]' \
      --output text)

  # Set default version if no tags exist
  if [ -z "$LATEST_TAG" ]; then
    echo "No tags found in ECR; setting initial version to 1.0.0"
    LATEST_TAG="v1.0.0"
  fi

  # Remove the "v" prefix if it exists
  LATEST_TAG=${LATEST_TAG#v}  
  
  # Parse the version components
  MAJOR=$(echo $LATEST_TAG | cut -d. -f1)
  MINOR=$(echo $LATEST_TAG | cut -d. -f2)
  PATCH=$(echo $LATEST_TAG | cut -d. -f3)

  # Determine version bump type (default to patch if VERSION_BUMP is unset)
  VERSION_BUMP="${VERSION_BUMP:-patch}"

  # Adjust version based on VERSION_BUMP
  case "$VERSION_BUMP" in
    major)
      MAJOR=$((MAJOR + 1))
      MINOR=0
      PATCH=0
      ;;
    feat)
      MINOR=$((MINOR + 1))
      PATCH=0
      ;;
    fix)
      PATCH=$((PATCH + 1))
      ;;
  esac

  # Calculate the next version
  NEXT_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
  echo "Calculated next version for main: $NEXT_VERSION"

else
  # Use the current tag as the version for non-main branches
  NEXT_VERSION=${BUILDKITE_BUILD_NUMBER}
  
fi
export NEXT_VERSION
echo "NEXT_VERSION in script: $NEXT_VERSION"